// Utils for interacting with the contract located in alto/contracts/TestUtils/Paymaster.sol
// This paymaster will sponsor all UserOperations

import {
    http,
    type Address,
    type Hex,
    concat,
    createPublicClient,
    getCreate2Address,
    pad,
    parseEther
} from "viem"
import { entryPoint06Address } from "viem/account-abstraction"
import { foundry } from "viem/chains"
import { ANVIL_RPC } from "./constants"
import { getAnvilWalletClient } from "./utils"

const PAYMASTER_V06_BYTECODE: Hex =
    "0x60a060405234801561001057600080fd5b50604051610a87380380610a8783398101604081905261002f916100c2565b80328061005657604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61005f81610072565b506001600160a01b0316608052506100f2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100d457600080fd5b81516001600160a01b03811681146100eb57600080fd5b9392505050565b60805161094961013e6000396000818161015f01528181610251015281816102e801528181610364015281816103f80152818161046f015281816104fc015261063701526109496000f3fe6080604052600436106100a75760003560e01c8063bb9fe6bf11610064578063bb9fe6bf14610181578063c23a5cea14610196578063c399ec88146101b6578063d0e30db0146101d9578063f2fde38b146101e1578063f465c77e1461020157600080fd5b80630396cb60146100ac578063205c2878146100c1578063715018a6146100e15780638da5cb5b146100f6578063a9a234091461012d578063b0d691fe1461014d575b600080fd5b6100bf6100ba366004610737565b61022f565b005b3480156100cd57600080fd5b506100bf6100dc366004610779565b6102ba565b3480156100ed57600080fd5b506100bf61032c565b34801561010257600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b34801561013957600080fd5b506100bf6101483660046107a5565b610340565b34801561015957600080fd5b506101107f000000000000000000000000000000000000000000000000000000000000000081565b34801561018d57600080fd5b506100bf61035a565b3480156101a257600080fd5b506100bf6101b1366004610834565b6103d1565b3480156101c257600080fd5b506101cb610457565b604051908152602001610124565b6100bf6104e7565b3480156101ed57600080fd5b506100bf6101fc366004610834565b610549565b34801561020d57600080fd5b5061022161021c366004610851565b61058c565b6040516101249291906108a5565b6102376105af565b604051621cb65b60e51b815263ffffffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630396cb609034906024016000604051808303818588803b15801561029e57600080fd5b505af11580156102b2573d6000803e3d6000fd5b505050505050565b6102c26105af565b60405163040b850f60e31b81526001600160a01b038381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063205c287890604401600060405180830381600087803b15801561029e57600080fd5b6103346105af565b61033e60006105dc565b565b61034861062c565b6103548484848461069c565b50505050565b6103626105af565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156103bd57600080fd5b505af1158015610354573d6000803e3d6000fd5b6103d96105af565b60405163611d2e7560e11b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063c23a5cea90602401600060405180830381600087803b15801561043c57600080fd5b505af1158015610450573d6000803e3d6000fd5b5050505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156104be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e291906108fa565b905090565b60405163b760faf960e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b760faf99034906024016000604051808303818588803b15801561043c57600080fd5b6105516105af565b6001600160a01b03811661058057604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610589816105dc565b50565b6060600061059861062c565b6105a38585856106d4565b91509150935093915050565b6000546001600160a01b0316331461033e5760405163118cdaa760e01b8152336004820152602401610577565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461033e5760405162461bcd60e51b815260206004820152601560248201527414d95b99195c881b9bdd08115b9d1c9e541bda5b9d605a1b6044820152606401610577565b60405162461bcd60e51b815260206004820152600d60248201526c6d757374206f7665727269646560981b6044820152606401610577565b606060006106e560008060006106ff565b604080516020810190915260008152969095509350505050565b600060d08265ffffffffffff16901b60a08465ffffffffffff16901b8561072757600061072a565b60015b60ff161717949350505050565b60006020828403121561074957600080fd5b813563ffffffff8116811461075d57600080fd5b9392505050565b6001600160a01b038116811461058957600080fd5b6000806040838503121561078c57600080fd5b823561079781610764565b946020939093013593505050565b600080600080606085870312156107bb57600080fd5b8435600381106107ca57600080fd5b9350602085013567ffffffffffffffff808211156107e757600080fd5b818701915087601f8301126107fb57600080fd5b81358181111561080a57600080fd5b88602082850101111561081c57600080fd5b95986020929092019750949560400135945092505050565b60006020828403121561084657600080fd5b813561075d81610764565b60008060006060848603121561086657600080fd5b833567ffffffffffffffff81111561087d57600080fd5b8401610160818703121561089057600080fd5b95602085013595506040909401359392505050565b604081526000835180604084015260005b818110156108d357602081870181015160608684010152016108b6565b506000606082850101526060601f19601f8301168401019150508260208301529392505050565b60006020828403121561090c57600080fd5b505191905056fea264697066735822122053527306dfabc8c0f532c474c7e3966caf999d7e7b30655a671e45f0b4b36e0f64736f6c63430008170033"

const PAYMASTER_V07_BYTECODE: Hex =
    "0x60a060405234801561001057600080fd5b50604051610b7f380380610b7f83398101604081905261002f9161018a565b80338061005757604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6100608161007c565b5061006a816100cc565b6001600160a01b0316608052506101dc565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516301ffc9a760e01b815263122a0e9b60e31b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa158015610117573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013b91906101ba565b6101875760405162461bcd60e51b815260206004820152601e60248201527f49456e747279506f696e7420696e74657266616365206d69736d617463680000604482015260640161004e565b50565b60006020828403121561019c57600080fd5b81516001600160a01b03811681146101b357600080fd5b9392505050565b6000602082840312156101cc57600080fd5b815180151581146101b357600080fd5b6080516109576102286000396000818161019101528181610255015281816102ec0152818161038d01528181610427015281816104970152818161052401526105ec01526109576000f3fe6080604052600436106100a75760003560e01c8063b0d691fe11610064578063b0d691fe1461017f578063bb9fe6bf146101b3578063c23a5cea146101c8578063c399ec88146101e8578063d0e30db01461020b578063f2fde38b1461021357600080fd5b80630396cb60146100ac578063205c2878146100c157806352b7512c146100e1578063715018a6146101185780637c627b211461012d5780638da5cb5b1461014d575b600080fd5b6100bf6100ba36600461073c565b610233565b005b3480156100cd57600080fd5b506100bf6100dc36600461077e565b6102be565b3480156100ed57600080fd5b506101016100fc3660046107aa565b610330565b60405161010f9291906107fe565b60405180910390f35b34801561012457600080fd5b506100bf610353565b34801561013957600080fd5b506100bf610148366004610853565b610367565b34801561015957600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161010f565b34801561018b57600080fd5b506101677f000000000000000000000000000000000000000000000000000000000000000081565b3480156101bf57600080fd5b506100bf610383565b3480156101d457600080fd5b506100bf6101e33660046108eb565b610400565b3480156101f457600080fd5b506101fd61047f565b60405190815260200161010f565b6100bf61050f565b34801561021f57600080fd5b506100bf61022e3660046108eb565b610571565b61023b6105b4565b604051621cb65b60e51b815263ffffffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630396cb609034906024016000604051808303818588803b1580156102a257600080fd5b505af11580156102b6573d6000803e3d6000fd5b505050505050565b6102c66105b4565b60405163040b850f60e31b81526001600160a01b038381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063205c287890604401600060405180830381600087803b1580156102a257600080fd5b6060600061033c6105e1565b610347858585610651565b91509150935093915050565b61035b6105b4565b610365600061067c565b565b61036f6105e1565b61037c85858585856106cc565b5050505050565b61038b6105b4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156103e657600080fd5b505af11580156103fa573d6000803e3d6000fd5b50505050565b6104086105b4565b60405163611d2e7560e11b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063c23a5cea90602401600060405180830381600087803b15801561046b57600080fd5b505af115801561037c573d6000803e3d6000fd5b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156104e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050a9190610908565b905090565b60405163b760faf960e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b760faf99034906024016000604051808303818588803b15801561046b57600080fd5b6105796105b4565b6001600160a01b0381166105a857604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6105b18161067c565b50565b6000546001600160a01b031633146103655760405163118cdaa760e01b815233600482015260240161059f565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103655760405162461bcd60e51b815260206004820152601560248201527414d95b99195c881b9bdd08115b9d1c9e541bda5b9d605a1b604482015260640161059f565b606060006106626000806000610704565b604080516020810190915260008152969095509350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405162461bcd60e51b815260206004820152600d60248201526c6d757374206f7665727269646560981b604482015260640161059f565b600060d08265ffffffffffff16901b60a08465ffffffffffff16901b8561072c57600061072f565b60015b60ff161717949350505050565b60006020828403121561074e57600080fd5b813563ffffffff8116811461076257600080fd5b9392505050565b6001600160a01b03811681146105b157600080fd5b6000806040838503121561079157600080fd5b823561079c81610769565b946020939093013593505050565b6000806000606084860312156107bf57600080fd5b833567ffffffffffffffff8111156107d657600080fd5b840161012081870312156107e957600080fd5b95602085013595506040909401359392505050565b604081526000835180604084015260005b8181101561082c576020818701810151606086840101520161080f565b506000606082850101526060601f19601f8301168401019150508260208301529392505050565b60008060008060006080868803121561086b57600080fd5b85356003811061087a57600080fd5b9450602086013567ffffffffffffffff8082111561089757600080fd5b818801915088601f8301126108ab57600080fd5b8135818111156108ba57600080fd5b8960208285010111156108cc57600080fd5b9699602092909201985095966040810135965060600135945092505050565b6000602082840312156108fd57600080fd5b813561076281610769565b60006020828403121561091a57600080fd5b505191905056fea2646970667358221220aa4cc5ad6579275fcc6e82945d0237aad62d2e956e39cf5920bc8ff09b1f684e64736f6c63430008170033"

const publicClient = createPublicClient({
    transport: http(ANVIL_RPC),
    chain: foundry
})

export const deployPaymaster = async (
    entryPoint: Address
): Promise<Address> => {
    let createBytecode = PAYMASTER_V07_BYTECODE

    if (entryPoint === entryPoint06Address) {
        createBytecode = PAYMASTER_V06_BYTECODE
    }

    const counterFactual = getCreate2Address({
        from: "0x4e59b44847b379578588920ca78fbf26c0b4956c",
        salt: "0x0000000000000000000000000000000000000000000000000000000000000000",
        bytecode: concat([createBytecode, pad(entryPoint)])
    })

    const bytecode = await publicClient.getCode({
        address: counterFactual
    })

    if (!bytecode) {
        // if it doesn't exist, deploy it
        const walletClient = getAnvilWalletClient(0)

        await walletClient.sendTransaction({
            data: concat([
                "0x0000000000000000000000000000000000000000000000000000000000000000",
                createBytecode,
                pad(entryPoint)
            ]),
            to: "0x4e59b44847b379578588920ca78fbf26c0b4956c"
        })

        // deposit 100ETH to the deployed paymaster
        await walletClient.sendTransaction({
            to: counterFactual,
            value: parseEther("100"),
            data: "0xd0e30db0" /* sig for deposit() */
        })
    }

    return counterFactual
}

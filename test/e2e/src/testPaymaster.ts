// Utils for interacting with the contract located in alto/contracts/TestUtils/Paymaster.sol
// This paymaster will sponsor all UserOperations

import {
    http,
    type Address,
    type Hex,
    concat,
    createPublicClient,
    encodeAbiParameters,
    getCreate2Address,
    pad,
    parseEther
} from "viem"
import { entryPoint06Address } from "viem/account-abstraction"
import { foundry } from "viem/chains"
import { getAnvilWalletClient } from "./utils/index.js"

const PAYMASTER_V06_BYTECODE: Hex =
    "0x60a034606d57601f61047a38819003918201601f19168301916001600160401b03831184841017607157808492602094604052833981010312606d57516001600160a01b0381168103606d576080526040516103f49081610086823960805181818161025001526103200152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f905f3560e01c908163a9a2340914610344578163b0d691fe146102f657508063d0e30db01461022d5763f465c77e1461004a575f80fd5b346102225760603660031901126102225760043567ffffffffffffffff81116102255780360390610160600319830112610229576101248101359160221901821215610229570190600482013567ffffffffffffffff811161022557803603602484011361022557806014116102255760809083018390036013190112610222576100d76038830161039e565b6100e36058840161039e565b926100fc60986100f5607884016103b1565b92016103b1565b6101c457156101be5760015b60405191602083019183831067ffffffffffffffff8411176101aa5760ff79ffffffffffff00000000000000000000000000000000000000007fffffffffffff00000000000000000000000000000000000000000000000000006060979886604052898852604051998a9860408a525180988160408c01528b8b015e89888a01015260d01b169360a01b16911617176020830152601f80199101168101030190f35b602485634e487b7160e01b81526041600452fd5b81610108565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5061796d617374657220666f72636564207265766572740000000000000000006044820152fd5b80fd5b5080fd5b8280fd5b505f3660031901126102f25773ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016803b156102f2575f602491604051928380927fb760faf900000000000000000000000000000000000000000000000000000000825230600483015234905af180156102e7576102bd575080f35b905067ffffffffffffffff81116102d357604052005b634e487b7160e01b5f52604160045260245ffd5b6040513d5f823e3d90fd5b5f80fd5b346102f2575f3660031901126102f25760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b346102f25760603660031901126102f257600360043510156102f25760243567ffffffffffffffff81116102f257366023820112156102f257806004013567ffffffffffffffff81116102f257369101602401116102f257005b359065ffffffffffff821682036102f257565b359081151582036102f25756fea2646970667358221220d2e88498643de7a1ae7c1f0e027f89eea933639646da29372753f8be0b3a2ca564736f6c634300081c0033"

const PAYMASTER_V07_BYTECODE: Hex =
    "0x60a034606c57601f61047438819003918201601f19168301916001600160401b03831184841017607057808492602094604052833981010312606c57516001600160a01b0381168103606c576080526040516103ef90816100858239608051818181606c01526101570152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f905f3560e01c90816352b7512c146101d5575080637c627b211461017b578063b0d691fe1461012b5763d0e30db01461004a575f80fd5b5f3660031901126101275773ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016803b15610127575f602491604051928380927fb760faf900000000000000000000000000000000000000000000000000000000825230600483015234905af1801561011c576100d9575080f35b905067ffffffffffffffff81116100ef57604052005b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6040513d5f823e3d90fd5b5f80fd5b34610127575f36600319011261012757602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461012757608036600319011261012757600360043510156101275760243567ffffffffffffffff8111610127573660238201121561012757806004013567ffffffffffffffff8111610127573691016024011161012757005b346101275760603660031901126101275760043567ffffffffffffffff811161012757803603906101206003198301126101275760e481013591602219018212156101275701600481013567ffffffffffffffff8111610127578036036024830113610127578060341161012757608090820182900360331901126101275761026060588201610399565b9061026d60788201610399565b9261028660b861027f609885016103ac565b93016103ac565b61033d575015610336576001905b60405190602082019082821067ffffffffffffffff8311176100ef57606093826040525f845260ff79ffffffffffff00000000000000000000000000000000000000007fffffffffffff0000000000000000000000000000000000000000000000000000604051988997604089525180978160408b01528a8a015e5f89888a01015260d01b169360a01b16911617176020830152601f80199101168101030190f35b5f90610294565b807f08c379a0000000000000000000000000000000000000000000000000000000006064925260206004820152601760248201527f5061796d617374657220666f72636564207265766572740000000000000000006044820152fd5b359065ffffffffffff8216820361012757565b359081151582036101275756fea26469706673582212201fa9f955576a9ae82cd5b2b64533c4afd8b73ca9d4bd4ab7e2325c2a117eb2d564736f6c634300081c0033"

export const deployPaymaster = async ({
    entryPoint,
    anvilRpc,
    salt = "0x0000000000000000000000000000000000000000000000000000000000000000",
    funded = true
}: {
    entryPoint: Address
    anvilRpc: string
    salt?: Hex
    funded?: boolean
}): Promise<Address> => {
    const publicClient = createPublicClient({
        transport: http(anvilRpc),
        chain: foundry
    })

    let createBytecode = PAYMASTER_V07_BYTECODE

    if (entryPoint === entryPoint06Address) {
        createBytecode = PAYMASTER_V06_BYTECODE
    }

    const counterFactual = getCreate2Address({
        from: "0x4e59b44847b379578588920ca78fbf26c0b4956c",
        salt,
        bytecode: concat([createBytecode, pad(entryPoint)])
    })

    const bytecode = await publicClient.getCode({
        address: counterFactual
    })

    if (!bytecode) {
        // if it doesn't exist, deploy it
        const walletClient = getAnvilWalletClient({
            addressIndex: 0,
            anvilRpc
        })

        await walletClient.sendTransaction({
            data: concat([salt, createBytecode, pad(entryPoint)]),
            to: "0x4e59b44847b379578588920ca78fbf26c0b4956c"
        })

        // deposit 100ETH to the deployed paymaster if funded flag is true
        if (funded) {
            await walletClient.sendTransaction({
                to: counterFactual,
                value: parseEther("100"),
                data: "0xd0e30db0" /* sig for deposit() */
            })
        }
    }

    return counterFactual
}

export function encodePaymasterData({
    validUntil = 0,
    validAfter = 0,
    invalidSignature = false,
    forceRevert = false
}: {
    validUntil?: number
    validAfter?: number
    invalidSignature?: boolean
    forceRevert?: boolean
} = {}): Hex {
    return encodeAbiParameters(
        [
            { type: "uint48", name: "validUntil" },
            { type: "uint48", name: "validAfter" },
            { type: "bool", name: "invalidSignature" },
            { type: "bool", name: "forceRevert" }
        ],
        [validUntil, validAfter, invalidSignature, forceRevert]
    )
}
